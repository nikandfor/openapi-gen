{{ define "funcbody" -}}
// {{ .path }}
func (c *{{ .srv }}Client) {{ template "funcsig" dict "op" .op "params" (append .item.Parameters .op.Parameters) }} {
	p := "{{ .path }}"
	q := make(http.Values)

	{{ range .item.Parameters -}}
		{{ template "getparam" . -}}
	{{ end }}

	uri, err := url.Parse(c.addr)
	if err != nil {
		panic(err)
	}
	uri.Path = path.Join(uri.Path, p)
	uri.RawQuery = q.Encode()

	var r io.Reader

	{{ with .op.RequestBody }}
	data, err := json.Marshal({{ template "typeVar" . }})
	if err != nil {
		return errors.Wrap(err, "marshal body")
	}
	r = bytes.NewReader(data)
	{{ end }}

	req, err := http.NewRequestWithContext(ctx, "{{ .meth | toupper }}", uri.String(), r)
	if err != nil {
		return errors.Wrap(err, "prepare request")
	}

	resp, err := s.Client.Do(req)
	if err != nil {
		return errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	{{ with index .op.Responses "200" }}
	var r {{ template "typeType" . }}
	data, err = ioutil.ReadAll(resp.Body)
	if err != nil {
		return errors.Wrap(err, "read response")
	}

	err = json.Unmarshal(data, &r)
	if err != nil {
		return errors.Wrap(err, "unmarshal response")
	}

	return &r, nil
	{{- else }}
	return nil
	{{- end }}
}
{{ end -}}

{{ define "getparam" -}}
{{ with .Value }}
	{{- if eq .In "path" -}}
		p = strings.Replace(p, "{{ "{" }}{{ .Name }}{{ "}" }}", {{ .Name }})
	{{ else if eq .In "query" -}}
		q.Set("{{ .Name }}", {{ .Name }})
	{{ end -}}
{{ end -}}
{{ end -}}

{{- if .help -}}
Golang client generator

Arguments
    package - package name (default: oapi)
    service - service name (default: Service)
{{ else -}}
{{ $srv := (or .args.service "Service") | title -}}
/* OpanAPI {{ .swagger.Info.Title }} server
{{ with .swagger.Info.Description }}{{ . }}{{ end -}}
{{ with .swagger.Info.Version }}Version: {{ . }}{{ end }}

Generated by opanapi-gogen. DO NOT EDIT MANUALLY!
*/

// Command: {{ .command }}

{{- with .args.buildtags }}

// +build {{ . }}{{ end }}

package {{ or .args.package "oapi" }}

import (
	"http"
)

type (
	{{ $srv }}Client struct {
		addr string
	}
)

{{ range $path, $v := .swagger.Paths -}}
{{ with .Get -}}{{ template "funcbody" dict "path" $path "op" . "item" $v "srv" $srv "meth" "GET" }}
{{ end -}}
{{ with .Post -}}{{ template "funcbody" dict "path" $path "op" . "item" $v "srv" $srv "meth" "POST" }}
{{ end -}}
{{ with .Put -}}{{ template "funcbody" dict "path" $path "op" . "item" $v "srv" $srv "meth" "PUT" }}
{{ end -}}
{{ with .Delete -}}{{ template "funcbody" dict "path" $path "op" . "item" $v "srv" $srv "meth" "DELETE" }}
{{ end -}}
{{ end -}}

{{ end -}}
