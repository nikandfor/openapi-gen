
{{ define "handle" -}}
r.{{ .meth }}("{{ replace (replace .path "{" ":") "}" "" }}", srv.{{ .op }})
{{- end -}}

{{ define "getparam" -}}
	{{ with .Value }}	{{ .Name }} := {{ "" }}
	{{- if eq .In "path" -}}
		c.Param
	{{- else if eq .In "query" -}}
		c.Query
	{{- end -}}
		("{{ .Name }}"){{ end -}}
{{ end -}}

{{ define "funcbody" -}}
// {{ .path }}
func (s *{{ .srv | untitle }}Service) {{ .op.OperationID }}(c *gin.Context) {
	ctx, _ := c.Get("context.Context").(context.Context)
	if ctx == nil {
		ctx = context.Background()
	}

{{ range .item.Parameters -}}
	{{ template "getparam" . }}
{{ end -}}
{{- range .op.Parameters -}}
	{{ template "getparam" . }}
{{- end -}}
{{ with .op.RequestBody }}
	var {{ template "typeDef" . }}
	err := c.Bind(&{{ template "typeVar" . }})
	if err != nil {
		s.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
	}
{{ end }}

	resp, err := s.s.{{ .op.OperationID }}(ctx{{ template "paramNames" append .item.Parameters .op.Parameters }}{{ with .op.RequestBody }}, &{{ template "typeVar" .}}{{ end }})
	if err != nil {
		s.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
	}

	s.JSON(http.StatusOK, resp)
}
{{ end -}}

{{- if .help -}}
Golang server generator

Arguments
    package - package name (default: oapi)
    service - service name (default: Service)
{{ else -}}
{{ $srv := (or .args.service "Service") | title -}}
/* OpanAPI {{ .swagger.Info.Title }} server
{{ with .swagger.Info.Description }}{{ . }}{{ end -}}
{{ with .swagger.Info.Version }}Version: {{ . }}{{ end }}

Generated by opanapi-gogen. DO NOT EDIT MANUALLY!
*/

// Command: {{ .command }}

{{- with .args.buildtags }}

// +build {{ . }}{{ end }}

package {{ or .args.package "oapi" }}

import (
	"github.com/gin-gonic/gin"
)

type (
	{{ $srv }}Interface interface {
		{{- range $path, $v := .swagger.Paths }}
		// {{ $path }}{{ "\n" }}
			{{- with .Get }}		{{ template "funcsig" dict "op" . "params" (append $v.Parameters .Parameters) }} // GET
{{ end -}}
			{{- with .Post }}		{{ template "funcsig" dict "op" . "params" (append $v.Parameters .Parameters) }} // POST
{{ end -}}
			{{- with .Put }}		{{ template "funcsig" dict "op" . "params" (append $v.Parameters .Parameters) }} // PUT
{{ end -}}
			{{- with .Delete }}		{{ template "funcsig" dict "op" . "params" (append $v.Parameters .Parameters) }} // DELETE
{{ end -}}
		{{ end }}
	}

	{{ $srv | untitle }}Service struct {
		s {{ $srv }}Interface
	}
)

func Handle{{ $srv }}(s {{ $srv }}Interface, r gin.Router) {
	srv := {{ $srv | untitle }}Service{
		s: s,
	}

	{{ range $path, $v := .swagger.Paths }}
	{{ with .Get -}}
	{{ template "handle" dict "meth" "GET" "op" .OperationID "path" $path }}
	{{ end -}}
	{{ with .Post -}}
	{{ template "handle" dict "meth" "POST" "op" .OperationID "path" $path }}
	{{ end -}}
	{{ with .Put -}}
	{{ template "handle" dict "meth" "PUT" "op" .OperationID "path" $path }}
	{{ end -}}
	{{ with .Delete -}}
	{{ template "handle" dict "meth" "DELETE" "op" .OperationID "path" $path }}
	{{ end -}}
	{{ end }}
}

{{ range $path, $v := .swagger.Paths -}}
{{ with .Get -}}{{ template "funcbody" dict "path" $path "op" . "item" $v "srv" $srv }}
{{ end -}}
{{ with .Post -}}{{ template "funcbody" dict "path" $path "op" . "item" $v "srv" $srv }}
{{ end -}}
{{ with .Put -}}{{ template "funcbody" dict "path" $path "op" . "item" $v "srv" $srv }}
{{ end -}}
{{ with .Delete -}}{{ template "funcbody" dict "path" $path "op" . "item" $v "srv" $srv }}
{{ end -}}
{{ end }}

{{- end -}}
